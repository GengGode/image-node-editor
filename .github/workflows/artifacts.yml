name: Artifacts

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # 跳过提交信息开头为doc:或者docs:的提交
    #if: "!startsWith(github.event.head_commit.message, 'Doc:') && !startsWith(github.event.head_commit.message, 'doc:')"
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
    - name: Cache CMake .cache opencv
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/build/.cache
        key: cmake-cache-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: cmake-cache-${{ runner.os }}-

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DIMAGE_NODE_EDITOR_BUILD_OPENCV=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{env.BUILD_TYPE}}

    - name: Upload a Build Artifact for Release
      uses: actions/upload-artifact@v3
      with:
        name: windows-build-${{env.BUILD_TYPE}}
        path: ${{ github.workspace }}/build/bin
        if-no-files-found: 'warn'

  # nightly and pre-release
  release-nightly:
    # 跳过提交信息开头为doc:或者docs:的提交
    #if: "!startsWith(github.event.head_commit.message, 'Doc:') && !startsWith(github.event.head_commit.message, 'doc:')"
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Get the build number
      id: build_number
      run: echo "::set-output name=build_number::$(date +'%Y%m%d')"

    - name: Get Build Artifact
      uses: actions/download-artifact@v2
      with:
        name: windows-build-${{env.BUILD_TYPE}}
        path: ${{ github.workspace }}/build
    
    - name: Package
      run: |
        mkdir -p
        mv ${{ github.workspace }}/build/ ${{ github.workspace }}/build-release/
        tar -czf ${{ github.workspace }}/build-release.tar.gz ${{ github.workspace }}/build-release/
   
    - name: Upload to GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ github.workspace }}/build-release.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: nightly-${{ steps.build_number.outputs.build_number }}
        name: Nightly Build
        body: "Changes: \n - ${{ github.event.head_commit.message }}"
        draft: false
        prerelease: true
        